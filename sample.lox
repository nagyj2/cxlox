// // Benchmark Hash Table Probing
// class Zoo{
// 	init(){
// 		this.aardvark = 1;
// 		this.baboon		= 1;
// 		this.cat			= 1;
// 		this.donkey		= 1;
// 		this.elephant	= 1;
// 		this.fox			= 1;
// 	}

// 	ant()			{ return this.aardvark; }
// 	banana()	{ return this.baboon; }
// 	tuna()		{ return this.cat; }
// 	hay()			{ return this.donkey; }
// 	grass()		{ return this.elephant; }
// 	mouse()		{ return this.fox; }
// }

// var zoo = Zoo();
// var sum = 0;
// var times = 0;
// var start = ticks();

// while (ticks() - start < 10) {
// 	sum = sum + zoo.ant()
// 						+ zoo.banana()
// 						+ zoo.tuna()
// 						+ zoo.hay()
// 						+ zoo.grass()
// 						+ zoo.mouse();
// 	times = times + 1;
// }

// print ticks() - start;
// print "Times: ";
// print times;
// print sum;

// fun mathops(){
// Test unary minus

-1 == -1;
--1 == 1;
-0 == 0;
0 == -1;

// Test addition sign

1 + 1 == 2;
1.0 + 1 == 2;
1 + 1.0 == 2;
1.0 + 1.0 == 2;
-1 + 1 == 0;
1.5 + 1.0 == 2.5;
1.5 + 1.5 == 3.0;
1 + 2 + 3 == 6;
6 == 1 + 2 + 3;

// Test subtraction sign

1 - 1 == 0;
1.0 - 1 == 0;
1 - 1.0 == 0;
1.0 - 1.0 == 0;
-1 - 1 == -2;
-1 - -1 == 0;
1.5 - 1.0 == 0.5;
1.5 - 2.5 == 1.0;
1 - 2 - 3 == -4;
0 == 3 - 2 - 1;

// Test multiplication sign

1 * 1 == 1;
1.0 * 2 == 2;
2 * 2.0 == 4;
1.5 * 4.0 == 6;
-1 * 1 == -1;
1.5 * 1.0 == 1.5;
1.5 * 1.5 == 2.25;
1 * 2 * 3 == 6;
1 * 2 * -3 == -6;
-2 * -3 == 6;

// Test division sign

1 / 1 == 1;
1.0 / 2 == 0.5;
2 / 2.0 == 1;
1.5 / 4.0 == 0.375;
-1 / 1 == -1;
1.5 / 1.0 == 1.5;
1.5 / 1.5 == 1;
1 / 2 / 4 == 0.125;
1 / -2 / 4 == -0.125;
// }

// mathops();

var a;
var b;
fun basicops(){
  // Printing

  print 4;
  print 4.0;
  print -4;
  print 2.0 + 2;
  print "2 + 2";
  print true;

  // Variables

  a= nil;
  a == nil;
  a == a;
  print a;

  a = 2;
  print a == 2;
  print a == a;
  print a = true;

  // Local Variables

  a = 5;
  {
    print a == 5;
    var b = 10;
    print b == 10;

    a = 20;
    print a == 20;
    b = 30;
    print b == 30;

    var c = a = b;
    print a == 30;
    print b == 30;
    print c == 30;
    // var b = 0; // error - already defined
  }

  print a == 30;

  // Logical operators

  a = true;
  print a and true;
  print !(a and false);
  print a or true;
  print a or false;

  a = false;
  print (a and true) == false;
  print !(a and false) == true;
  print (a or true) == true;
  print (a or false) == false;

  // Branching

  a = true;
  if (a) {
    print a;
  }

  a = false;
  if (a == false) {
    print a == false;
  }

  if (a) {
    print !a;
  } else {
    print !a;
  }

  a = 2;
  if (a == 1) {
    print a != 2;
  } else if (a == 2) {
    print a == 2;
  } else {
    print a != 2;
  }

  a = true;
  b = false;
  if (a) {
    if (b)
      print a and b;
    else
      print a and !b;
  } else {
    if (b)
      print !a and b;
    else
      print !a and !b;
  }

  // While loops

  a = 0;
  while (a < 10) {
    print a;
    a = a + 1;
  }
}
  
fun min(a,b){
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

fun fib(n) {
	if (n <= 1) {
		return 1;
	} else {
		return fib(n-1) + fib(n-2);
	}
}

print min(8,2);
print fib(6);

// Expanded Native Functions

// print type(8) == "num";
// print type(8.0) == "num";
// print type("8") != "num";

// print type("8") == "str" and type(8) != "str" and type(true) == "bool";
// ticks();
// print "Date is now " + date();

// print ticks();

fun makeVector(x,y){
  var z = 9;
  fun vector(method){
    z = method;
    switch (method){
      case "x":     return x; // return {->x};
      case "y":     return y; // return {->y};
      case "set-x": return newx => x = newx;
      case "set-y": return newy => y = newy;
      case "add":   return (other => makeVector(x + other("x"), y + other("y")));
      // case "mult":  return other => makeVector(x * other("x"), y * other("y"));
      default:      return nil;
    }
  }
  return vector;
}

let v1 = makeVector(2,6);
let v2 = makeVector(3,-2);

let v3 = v1("add")(v2);
print v3("x") == 5;
print v3("y") == 4;

v3("set-x")(10);
print v3("x") == 10;
print v3("y") == 4;

print v2("error") == nil;

// Classes

class CoffeeMaker {
  init(coffee){
    this.coffee = coffee;
  }
  brew(){
    return this.coffee;
  }
}

var maker = CoffeeMaker("espresso");
print maker.brew();

class Oops {
  init() {
    fun f() {
      print "NOT A METHOD";
    }
    this.field = f;
  }
}

var oops = Oops();
oops.field();

// Inheritance

class Doughnut {
  cook() {
    print "Dunk in the fryer.";
  }
}

class Cruller <- Doughnut {
  finish() {
    print "Glaze with icing.";
  }

  cook() {
    super.cook();
    print "Put in the oven.";
  }
}

var c = Cruller();
c.cook();
c.finish();

// Attribute deletion

class Pie{} 
var p = Pie(); 
p.A = "test";

print hasattr(p, "A") == true;
del p.A;
print hasattr(p, "A") == false;

var s = Pie(); 
p.B = s; 
s.C = "test";
print hasattr(p.B, "C") == true;
print p.B.C == s.C;
del p.B.C;
print hasattr(p.B, "C") == false;
print hasattr(s, "C") == false;
print p.B == s;
del p.B;
print hasattr(p, "B") == false;

// Safe Property Access

// class Pie{}
var p = Pie();
p.a = "hi";
print p.a == "hi";
print p?.a == "hi";
print p?.b == nil;
print p?.b?.c == nil;
print p?.b?.c?.f?.g?.h?.j == nil;

print 4?.a == nil;

// // Type comments

// fun max(a: int, b:int) -> int {
//   return a > b ? a : b;
// }

// print max(1,2);

// var a : int = 8;
// let b : bool = true;

// Multiple property deletions

class P{}

var p = P();
p.a = 1;
p.b = 2;
p.c = 3;

del p.a, p.c;
print p?.a == nil;
print p?.b != nil;
print p?.c == nil;

// Benchmark Hash Table Probing
// class Zoo{
// 	init(){
// 		this.aardvark = 1;
// 		this.baboon		= 1;
// 		this.cat			= 1;
// 		this.donkey		= 1;
// 		this.elephant	= 1;
// 		this.fox			= 1;
// 	}

// 	ant()			{ return this.aardvark; }
// 	banana()	{ return this.baboon; }
// 	tuna()		{ return this.cat; }
// 	hay()			{ return this.donkey; }
// 	grass()		{ return this.elephant; }
// 	mouse()		{ return this.fox; }
// }

// var zoo = Zoo();
// var sum = 0;
// var times = 0;
// var start = ticks();

// while (ticks() - start < 10) {
// 	sum = sum + zoo.ant()
// 						+ zoo.banana()
// 						+ zoo.tuna()
// 						+ zoo.hay()
// 						+ zoo.grass()
// 						+ zoo.mouse();
// 	times = times + 1;
// }

// print ticks() - start;
// print times;
// print sum;

// Importing Files
/*
include "lib.lox";

one = "one";
string = "string";
function;
// function();
Class;
*/

// Lists

var a = [1,2,3];
print a[0] == 1;
print a[1] == 2;
print a[2] == 3;

a[1] = 4;

print a[0] == 1;
print a[1] == 4;
print a[2] == 3;

print "Done";
